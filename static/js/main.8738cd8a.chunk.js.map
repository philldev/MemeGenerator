{"version":3,"sources":["assets/download.png","assets/logo.svg","assets/github-image.svg","assets/linkedin.svg","assets/jsreactnode.svg","context/memeContext.js","components/header/SocialLinks.jsx","container/App.js","serviceWorker.js","index.js"],"names":["module","exports","createContext","github","linkedIn","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,wPCIhBC,0B,oECIlBC,IAIAC,I,sDCkCMC,MAjCf,aCDoBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8738cd8a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/download.3ee9feae.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.0137b096.svg\";","module.exports = __webpack_public_path__ + \"static/media/github-image.192a6620.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.007eb41a.svg\";","module.exports = __webpack_public_path__ + \"static/media/jsreactnode.c136860b.svg\";","import React, { createContext, useState } from \"react\";\nimport fetchMemes from \"../utils/fetchMemes\";\nimport useLocalStorage from \"../utils/useLocalStorage\";\n\nexport const MemeContext = createContext();\n\nexport const MemeProvider = ({ children }) => {\n  const [search, setSearch] = useState(\"\");\n  const [memes, setMemes] = useState([]);\n  const [savedMemes, setSavedMemes] = useState([]);\n  const [error, setError] = useState(null);\n  useLocalStorage(setMemes, fetchMemes, memes, setSavedMemes, savedMemes);\n\n  // selected meme state for open modal\n  // const [selectedMeme, setSelectedMeme] = useState(null);\n  // const [isOpen, setIsOpen] = useState(false);\n\n  // posted memes\n  // const [postedMeme, setPostedMeme] = useState(null);\n\n  //TODO\n  //saved memes states\n\n  const value = {\n    memes,\n    handleSearch: (str) => {\n      setSearch(str);\n    },\n    search,\n    savedMemes,\n    setSavedMemes,\n    error,\n    setError,\n  };\n\n  return <MemeContext.Provider value={value}>{children}</MemeContext.Provider>;\n};\n","import React from \"react\";\nimport { Image } from \"@chakra-ui/core\";\nimport github from \"../../assets/github-image.svg\";\nimport linkedIn from \"../../assets/linkedin.svg\";\n\nconst links = [\n  {\n    href: \"https://github.com/philldev\",\n    src: github,\n  },\n  {\n    href: \"https://github.com/philldev\",\n    src: linkedIn,\n  },\n];\n\nexport default function SocialLinks() {\n  return (\n    <>\n      {links.map((l, idx) => (\n        <a key={idx} href={l.href}>\n          <Image key={idx} marginRight=\"1rem\" height=\"18px\" src={l.src} />\n        </a>\n      ))}\n    </>\n  );\n}\n","import { CSSReset, ThemeProvider } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Dashboard from \"../components/dashboard/Dashboard\";\nimport Error from \"../components/Error\";\nimport Header from \"../components/header/Header\";\nimport Nav from \"../components/header/Nav\";\nimport Main from \"../components/main/Main\";\nimport MemeTemplate from \"../components/main/MemeTemplate\";\nimport { MemeProvider } from \"../context/memeContext\";\nimport \"./App.css\";\nimport About from \"../components/About/About\";\n\nfunction App() {\n  return (\n    // Theme provider\n    <ThemeProvider>\n      <CSSReset />\n      {/* App Provider */}\n      <MemeProvider>\n        <Router>\n          <Nav />\n          <Switch>\n            {/* Main */}\n            <Route\n              path=\"/\"\n              exact\n              render={() => (\n                <>\n                  <Header />\n                  <Main />{\" \"}\n                </>\n              )}\n            />\n            <Route exact path=\"/meme/:id\" render={() => <MemeTemplate />} />\n            <Route exact path=\"/user\" render={() => <Dashboard />} />\n            <Route exact path=\"/about\" render={() => <About />} />\n          </Switch>\n        </Router>\n        {/* error handler */}\n        <Error />\n      </MemeProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}