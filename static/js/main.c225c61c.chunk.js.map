{"version":3,"sources":["assets/download.png","assets/logo.svg","assets/github-image.svg","assets/linkedin.svg","assets/jsreactnode.svg","components/dashboard/UserProfile.jsx","components/main/MemeBox.jsx","utils/useOnScreen.js","components/main/MemeColumn.jsx","utils/fetchMemes.js","context/memeContext.js","utils/useLocalStorage.js","utils/spliceMemes.js","components/dashboard/SavedMemes.jsx","components/dashboard/Dashboard.jsx","components/Error.js","components/header/RandomButton.jsx","components/header/Header.jsx","components/header/NavLinks.jsx","components/header/SocialLinks.jsx","components/header/Hamburger.jsx","components/header/Search.jsx","components/header/Nav.jsx","container/MainContainer.js","components/main/ColumnContainer.js","components/main/FavouriteButton.jsx","components/main/ModalImage.jsx","components/main/ModalInput.jsx","utils/postMemes.js","components/main/ModalForm.jsx","components/main/MemeTemplate.jsx","components/main/Main.jsx","utils/useLoading.js","utils/useResponsiveColumn.js","components/About/About.jsx","container/App.js","serviceWorker.js","index.js"],"names":["module","exports","UserProfile","Box","backgroundColor","boxShadow","width","padding","alignSelf","marginBottom","marginTop","display","mx","Avatar","size","name","src","photo","color","Heading","Text","MemeBox","meme","options","React","useState","ref","setRef","visible","setVisible","useEffect","observer","IntersectionObserver","isIntersecting","disconnect","observe","unobserve","useOnScreen","rootMargin","loading","setLoading","Link","to","isSavedMeme","_id","id","as","ReachLink","Flex","position","direction","maxW","marginX","minH","transition","className","Image","opacity","onLoad","e","url","alt","left","bottom","fontWeight","fontFamily","MemeColumn","memes","idx","flexBasis","flexGrow","flexShrink","marginRight","justifyContent","length","map","key","fetchMemes","setState","a","fetch","req","json","res","data","console","log","MemeContext","createContext","MemeProvider","children","search","setSearch","setMemes","savedMemes","setSavedMemes","error","setError","state","localState","JSON","parse","localStorage","getItem","setItem","stringify","localSavedmemes","useLocalStorage","value","handleSearch","str","Provider","temp","chunkSize","Math","ceil","i","push","slice","SavedMemes","useContext","chunkMemes","spliceMemes","paddingLeft","cm","Dashboard","flexDir","Error","Alert","status","paddingRight","CloseButton","right","top","onClick","RandomButton","randomMeme","floor","random","Button","bg","_hover","Header","alignItems","maxH","base","md","textAlign","fontSize","links","text","NavLinks","flexWrap","href","logo","height","l","textDecor","transform","github","linkedIn","SocialLinks","Hamburger","Menu","viewBox","fill","xmlns","rx","y","Search","Input","placeholder","onChange","target","Nav","pos","zIndex","background","minW","marginLeft","Main","paddingTop","ColumnContainer","FavouriteButton","handleSaveMeme","saved","ModalImage","selectedMeme","postedMeme","paddingBottom","download","ModalInput","register","FormControl","FormLabel","htmlFor","type","maxLength","isRequired","FormHelperText","setOutput","textArr","Object","values","combineText","join","message","ModalForm","setPostedMeme","setSaved","useForm","handleSubmit","errors","boxesArr","Array","box_count","onSubmit","valuesKeys","keys","reset","postMemes","Spinner","_","float","MemeTemplate","useParams","filter","m","flexDirection","toString","substr","newSavedMeme","s","input","useLoading","filteredMemes","toLowerCase","includes","chunksLength","num","setNum","handleResize","window","innerWidth","addEventListener","removeEventListener","useResponsiveColumn","useMemo","exact","path","render","props","About","lineHeight","stackLogo","App","ThemeProvider","CSSReset","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c225c61c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/download.3ee9feae.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.0137b096.svg\";","module.exports = __webpack_public_path__ + \"static/media/github-image.192a6620.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.007eb41a.svg\";","module.exports = __webpack_public_path__ + \"static/media/jsreactnode.c136860b.svg\";","import React from \"react\";\nimport { Text, Box, Avatar, Heading } from \"@chakra-ui/core\";\nimport photo from \"../../assets/download.png\";\n\nexport default function UserProfile() {\n  return (\n    <Box\n    backgroundColor='blue.900'\n    boxShadow=\"5px 5px #1A202C\"\n      width=\"100%\"\n      padding=\"2rem 1rem\"\n      alignSelf=\"flex-start\"\n      marginBottom=\"2rem\"\n      marginTop=\"2rem\"\n      display=\"flex\"\n      mx=\"auto\"\n    >\n      <Box width=\"25%\">\n        <Avatar\n          display=\"block\"\n          size=\"2xl\"\n          mx='auto'\n          name=\"Segun Adebayo\"\n          src={photo}\n        />\n      </Box>\n\n      <Box color=\"#fff\">\n        <Box>\n          <Heading> Phillip 1997 </Heading>\n        </Box>\n        <Box>\n          <Text> <strong>9</strong>  Memes</Text>\n          <Text>\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Ipsam nisi\n            et atque incidunt. Laborum quo rem minus incidunt eius quod!\n          </Text>\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n","import { Flex, Image, Text, Link } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport useOnScreen from \"../../utils/useOnScreen\";\nimport { Link as ReachLink } from \"react-router-dom\";\nexport default function MemeBox({ meme }) {\n  const [setRef, visible] = useOnScreen({ rootMargin: \"-120px\" });\n\n  const [loading, setLoading] = React.useState(true);\n\n  const handleOnload = (e) => {\n    setLoading(false);\n  };\n\n  return (\n    <Link\n      to={meme.isSavedMeme ? `meme/${meme._id}` : `meme/${meme.id}`}\n      as={ReachLink}\n    >\n      <Flex\n        position=\"relative\"\n        direction=\"column\"\n        maxW=\"500px\"\n        marginX=\"auto\"\n        minH=\"120px\"\n        transition=\"all .2s ease-out\"\n        className=\"meme_box\"\n        marginBottom=\"20px\"\n      >\n        <Image\n          className={visible ? \"fade_in \" : null}\n          opacity={loading ? 0 : 1}\n          ref={setRef}\n          width=\"100%\"\n          onLoad={handleOnload}\n          src={visible ? meme.url : \"\"}\n          alt={meme.name}\n          boxShadow=\"5px 5px #1A202C\"\n        />\n        <Text\n          className=\"meme_title\"\n          position=\"absolute\"\n          left=\"10px\"\n          bottom=\"10px\"\n          fontWeight=\"bold\"\n          marginX=\"auto\"\n          fontFamily=\"Ubuntu\"\n        >\n          {meme.name}\n        </Text>\n      </Flex>\n    </Link>\n  );\n}\n","import React from \"react\";\n\nexport default  function useOnScreen (options) {\n  const [ref, setRef] = React.useState(null)\n  const [visible, setVisible] = React.useState(false)\n\n  React.useEffect(() => {\n    const observer = new IntersectionObserver(([entry], observer) => {\n      if (entry.isIntersecting) {\n        setVisible(true)\n        observer.disconnect()\n      }\n    }, options)\n\n    if (ref) {\n      observer.observe(ref)\n    }\n\n    return () => {\n      if (ref) {\n        observer.unobserve(ref)\n      }\n    }\n  }, [ref, options])\n\n  return [setRef, visible, ref]\n}","import { Box } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport MemeBox from \"./MemeBox\";\n\nexport default function MemeColumn({ memes, idx }) {\n  return (\n    <Box\n    \n      flexBasis={0}\n      flexGrow={1}\n      flexShrink={1}\n      marginRight=\"20px\"\n      justifyContent=\"center\"\n    >\n      {memes && memes.length > 0\n        ? memes.map((meme) => <MemeBox key={meme.id ? meme.id : meme._id} meme={meme} />)\n        : null}\n    </Box>\n  );\n}\n","const url = 'https://api.imgflip.com/get_memes'\n\nexport default async function fetchMemes (setState)  {\n  \n  try {\n    \n    const req = await fetch(url)\n\n    const res = await req.json()\n\n    const data = await res.data\n\n    setState(data.memes)\n\n  } catch (error) {\n\n    console.log('something went wrong')\n    \n  }\n\n}","import React, { createContext, useState } from \"react\";\nimport fetchMemes from \"../utils/fetchMemes\";\nimport useLocalStorage from \"../utils/useLocalStorage\";\n\nexport const MemeContext = createContext();\n\nexport const MemeProvider = ({ children }) => {\n  const [search, setSearch] = useState(\"\");\n  const [memes, setMemes] = useState([]);\n  const [savedMemes, setSavedMemes] = useState([]);\n  const [error, setError] = useState(null);\n  useLocalStorage(setMemes, fetchMemes, memes, setSavedMemes, savedMemes);\n\n  // selected meme state for open modal\n  // const [selectedMeme, setSelectedMeme] = useState(null);\n  // const [isOpen, setIsOpen] = useState(false);\n\n  // posted memes\n  // const [postedMeme, setPostedMeme] = useState(null);\n\n  //TODO\n  //saved memes states\n\n  const value = {\n    memes,\n    handleSearch: (str) => {\n      setSearch(str);\n    },\n    search,\n    savedMemes,\n    setSavedMemes,\n    error,\n    setError,\n  };\n\n  return <MemeContext.Provider value={value}>{children}</MemeContext.Provider>;\n};\n","import { useEffect } from \"react\";\n\nexport default function useLocalStorage (setState, fetchMemes, state, setSavedMemes, savedMemes) {\n  useEffect(() => {\n    const localState = JSON.parse(localStorage.getItem(\"imgflip\"));\n\n    if (localState.length > 0) {\n      setState(localState);\n    } else {\n      fetchMemes(setState);\n    }\n  }, [setState,fetchMemes]);\n  useEffect(() => {\n    localStorage.setItem(\"imgflip\", JSON.stringify(state));\n  }, [state]);\n  \n  useEffect(() => {\n    const localSavedmemes = JSON.parse(\n      localStorage.getItem(\"imgflipSavedMeme\")\n    );\n\n    if (localSavedmemes) {\n      setSavedMemes(localSavedmemes)\n    }\n  }, [setSavedMemes]);\n\n  useEffect(() => {\n    localStorage.setItem(\"imgflipSavedMeme\", JSON.stringify(savedMemes));\n  }, [savedMemes]);\n\n}","export default function (memes, size) {\n  //chunk the array\n  const data = memes;\n  const temp = [];\n  const chunkSize = Math.ceil(memes.length / size) ;\n  if (data.length > 0) {\n    for (let i = 0; i < data.length; i += chunkSize) {\n      temp.push(data.slice(i, i + chunkSize));\n    }\n\n    return temp;\n  } \n  \n}\n","import React, { useContext } from \"react\";\nimport { Box } from \"@chakra-ui/core\";\nimport MemeColumn from \"../main/MemeColumn\";\nimport { MemeContext } from \"../../context/memeContext\";\nimport spliceMemes from \"../../utils/spliceMemes\";\n\nexport default function SavedMemes() {\n  const { savedMemes } = useContext(MemeContext);\n  const chunkMemes = spliceMemes(savedMemes, 3);\n  \n  return (\n    <Box marginX='auto' width=\"100%\" display=\"flex\" paddingLeft='20px'>\n      {chunkMemes && chunkMemes.length > 0\n        ? chunkMemes.map((cm, idx) => (\n            <MemeColumn idx={idx} key={idx} memes={cm} />\n          ))\n        : null}\n    </Box>\n  );\n}\n","import { Box } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport UserProfile from \"./UserProfile\";\nimport SavedMemes from \"./SavedMemes\";\n\nexport default function Dashboard() {\n  \n\n  return (\n    <Box as=\"main\" maxW='975px' mx='auto' marginTop='66px'>\n      <Box display=\"flex\" flexDir='column'>\n        {/* User profile */}\n        <UserProfile/>\n        {/* Memes Collection */}\n        <SavedMemes/>\n      </Box>\n    </Box>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { MemeContext } from \"../context/memeContext\";\nimport { Alert, AlertIcon, CloseButton } from \"@chakra-ui/core\";\n\nexport default function Error() {\n  const { error, setError } = useContext(MemeContext);\n\n  \n\n  const handleCloseAlert = () => {\n    setError(null);\n  };\n\n  return error ? (\n    <Alert\n      status=\"error\"\n      className=\"slide_up\"\n      marginTop=\"100px\"\n      position=\"fixed\"\n      bottom=\"20px\"\n      left=\"35%\"\n      paddingRight=\"50px\"\n    >\n      <AlertIcon />\n      {error}\n      <CloseButton\n        position=\"absolute\"\n        right=\"8px\"\n        top=\"8px\"\n        onClick={handleCloseAlert}\n      />\n    </Alert>\n  ) : null;\n}\n","import React, { useContext } from \"react\";\nimport { Button, Link } from \"@chakra-ui/core\";\nimport { MemeContext } from \"../../context/memeContext\";\nimport { Link as ReachLink } from \"react-router-dom\";\n\nexport default function RandomButton() {\n  const { memes } = useContext(MemeContext);\n\n  const randomMeme = memes[Math.floor(Math.random() * 100 + 1)] || {};\n\n  return (\n    <Link to={`meme/${randomMeme.id}`} as={ReachLink}>\n      <Button bg=\"blue.700\" _hover={{ bg: \"blue.800\" }} padding=\"10px 14px\">\n        Random meme template\n      </Button>\n    </Link>\n  );\n}\n","import { Box, Heading, Text } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport RandomButton from \"./RandomButton\";\n\nexport default function Header() {\n  return (\n    <Box\n      marginTop=\"66px\"\n      display=\"flex\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n      flexDir=\"column\"\n      maxH=\"500px\"\n      minH=\"350px\"\n      padding={{ base: \"10px 35px\", md: \"15px 100px\" }}\n      as=\"header\"\n      color='#fff'\n    >\n      <Box marginTop=\"50px\" textAlign=\"center\">\n        <Heading fontSize={{ base: \"2xl\", md: \"5xl\" }} marginBottom=\"1rem\">\n          Make memes, make world peace{\" \"}\n        </Heading>\n        <Text> Pick a template and make a meme!! </Text>\n      </Box>\n      <RandomButton />\n      <Text color=\"#ACACAC\" textAlign='center'> \n        powered by imgflip.com <br />\n        Logo By Jonah Bethlehem, DE\n      </Text>\n    </Box>\n  );\n}\n","import React from \"react\";\nimport { Box, Link, Image } from \"@chakra-ui/core\";\nimport { Link as ReachLink } from \"react-router-dom\";\n\nimport logo from \"../../assets/logo.svg\";\n\nexport const links = [\n  {\n    to: \"/user\",\n    text: \"My Memes\",\n  },\n  {\n    to: \"/login\",\n    text: \"Login\",\n  },\n  {\n    to: \"/about\",\n    text: \"About\",\n  },\n];\n\nexport default function NavLinks() {\n  return (\n    <Box display=\"flex\" flexWrap=\"wrap\" as=\"nav\" alignItems=\"center\">\n      {/* By Jonah Bethlehem, DE  */}\n      <Link marginRight='1rem' href=\"/\">\n        <Image src={logo} height=\"35px\" />\n      </Link>\n      {links.map((l, idx) => (\n        <Link _hover={{textDecor:'none', transform:'scale(1.1)'}} key={idx} to={l.to} as={ReachLink} marginRight=\"1rem\">\n          {l.text}\n        </Link>\n      ))}\n    </Box>\n  );\n}\n","import React from \"react\";\nimport { Image } from \"@chakra-ui/core\";\nimport github from \"../../assets/github-image.svg\";\nimport linkedIn from \"../../assets/linkedin.svg\";\n\nconst links = [\n  {\n    href: \"https://github.com/philldev\",\n    src: github,\n  },\n  {\n    href: \"https://github.com/philldev\",\n    src: linkedIn,\n  },\n];\n\nexport default function SocialLinks() {\n  return (\n    <>\n      {links.map((l, idx) => (\n        <a key={idx} href={l.href}>\n          <Image key={idx} marginRight=\"1rem\" height=\"18px\" src={l.src} />\n        </a>\n      ))}\n    </>\n  );\n}\n","import React from \"react\";\nimport {\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Button,\n  Link,\n} from \"@chakra-ui/core\";\nimport { links } from \"./NavLinks\";\nimport SocialLinks from \"./SocialLinks\";\nimport { Link as ReachLink } from \"react-router-dom\";\n\nexport default function Hamburger() {\n  return (\n    <Menu>\n      <MenuButton\n        backgroundColor=\"#232A34\"\n        color=\"#000\"\n        position='absolute'\n        right='0'\n        marginRight='.5rem'\n        padding=\"0\"\n        display={{ base: \"block\", md: \"none\" }}\n        as={Button}\n        _hover={{ backgroundColor: \"transparent\" }}\n      >\n        <svg\n          width=\"30\"\n          height=\"21\"\n          viewBox=\"0 0 30 21\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <rect width=\"30\" height=\"5\" rx=\"2.5\" fill=\"#D0D0D0\" />\n          <rect y=\"8\" width=\"30\" height=\"5\" rx=\"2.5\" fill=\"#D0D0D0\" />\n          <rect y=\"16\" width=\"30\" height=\"5\" rx=\"2.5\" fill=\"#D0D0D0\" />\n        </svg>\n      </MenuButton>\n      <MenuList maxW=\"10px\" color=\"#000\">\n        {links.map((l, idx) => (\n          <MenuItem key={idx}>\n            <Link key={idx} to={l.to} as={ReachLink} marginRight=\"1rem\">\n              {l.text}\n            </Link>\n          </MenuItem>\n        ))}\n\n        <MenuItem>\n          <SocialLinks />\n        </MenuItem>\n      </MenuList>\n    </Menu>\n  );\n}\n","import { Input } from \"@chakra-ui/core\";\nimport React, { useContext } from \"react\";\nimport { MemeContext } from \"../../context/memeContext\";\n\nexport default function Search() {\n  const { handleSearch } = useContext(MemeContext);\n  const handleInput = (e) => {\n    handleSearch(e.target.value);\n  };\n\n  return (\n    <>\n      <Input\n        marginRight={{base:\"6rem\", md:'1rem'}}\n        width=\"auto\"\n        display=\"block\"\n        placeholder=\"Search meme template\"\n        color=\"black\"\n        size=\"sm\"\n        onChange={handleInput}\n      />\n    </>\n  );\n}\n","import { Box, Image, Link } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport logo from \"../../assets/logo.svg\";\nimport Hamburger from \"./Hamburger\";\nimport NavLinks from \"./NavLinks\";\nimport Search from \"./Search\";\nimport SocialLinks from \"./SocialLinks\";\n\nexport default function Nav() {\n  return (\n    <Box\n      pos=\"fixed\"\n      top=\"0\"\n      zIndex=\"20\"\n      color=\"#fff\"\n      background=\"#232A34\"\n      width=\"100%\"\n      height=\"66px\"\n      display=\"flex\"\n      justifyContent={{ base: \"space-between\", md: \"center\" }}\n      alignItems={{ base: \"center\", md: \"\" }}\n      minW='320px'\n    >\n      <Box\n        width=\"975px\"\n        display={{ base: \"none\", md: \"flex\" }}\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        paddingLeft=\"20px\"\n      >\n        <NavLinks />\n        <Box display=\"flex\" as=\"nav\" alignItems=\"center\">\n          <Search />\n          <SocialLinks />\n        </Box>\n      </Box>\n      <Link\n        display={{ base: \"block\", md: \"none\" }}\n        marginLeft=\"1rem\"\n        href=\"/\"\n      >\n        <Image src={logo} height=\"35px\" />\n      </Link>\n      <Box display={{ base: \"block\", md: \"none\" }}>\n        <Search />\n      </Box>\n      <Hamburger />\n    </Box>\n  );\n}\n","import { Box, Flex } from \"@chakra-ui/core\";\nimport React from \"react\";\n\nexport default function Main({children}) {\n\n  return (\n    <Box\n      as=\"main\"\n      className='container'\n      paddingLeft=\"15px\"\n      paddingTop=\"2rem\"\n      maxW='975px'\n\n    >\n      <Flex justifyContent=\"center\">\n        {children}\n      </Flex>\n    </Box>\n  );\n}\n","import React from 'react'\nimport MemeColumn from './MemeColumn'\n\nexport default function ColumnContainer({chunkMemes}) {\n  \n  return (\n    <>\n\n      {chunkMemes && chunkMemes.length > 0\n              ? chunkMemes.map((cm, idx) => (\n                  <MemeColumn idx={idx} key={idx} memes={cm} />\n                ))\n              : null}\n    </>\n  )\n}\n","import React from \"react\";\nimport { Button } from \"@chakra-ui/core\";\n\nexport default function FavouriteButton({handleSaveMeme, saved}) {\n  return (\n    <Button\n\n      backgroundColor={saved ? \"red.300\" : \"blue.500\"}\n      _hover={{ backgroundColor: \"blue.600\" }}\n      onClick={handleSaveMeme}\n    >\n      Save to Favourites\n    </Button>\n  );\n}\n","import { Box, Heading, Image, Link } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport FavouriteButton from \"./FavouriteButton\";\n\nexport default function ModalImage({ selectedMeme, postedMeme, handleSaveMeme, saved }) {\n  return (\n    <Box\n      padding=\"2rem 1rem\"\n      textAlign=\"center\"\n      flexBasis=\"0\"\n      flexGrow={{base:'1',md:\"2\"}}\n      flexShrink={{base:'1',md:\"2\"}}\n      backgroundColor=\"#1E4E8C\"\n      boxShadow=\"5px 5px #1A202C\"\n      marginX=\"1rem\"\n      paddingBottom='70px'\n      position='relative'\n    >\n      <Heading marginBottom=\"1rem\">{selectedMeme.name}</Heading>\n      <Image\n        className=\"meme\"\n        maxH=\"70vh\"\n        marginX=\"auto\"\n        src={postedMeme ? postedMeme : selectedMeme.url}\n        alt={selectedMeme.name}\n      />\n      {postedMeme ? (\n        <Box position='absolute' bottom='10px'>\n          {\" \"}\n          <FavouriteButton handleSaveMeme={handleSaveMeme} saved={saved}/>\n          <Link marginLeft='25px' download href={postedMeme} > Download Meme </Link>\n          {\" \"}\n        </Box>\n      ) : null}\n    </Box>\n  );\n}\n","import { FormControl, FormHelperText, FormLabel, Input } from \"@chakra-ui/core\";\nimport React from \"react\";\n\nexport default function ModalInput({ idx, register }) {\n  \n  React.useEffect(() => {\n    \n  })\n\n  return (\n    <FormControl textAlign=\"left\" marginTop=\"20px\">\n      <FormLabel htmlFor={`text${idx}`}>Text{`${idx + 1}`}</FormLabel>\n      <Input\n        ref={register}\n        color=\"gray.700\"\n        name={`text${idx}`}\n        type=\"text\"\n        id={`text${idx}`}\n        maxLength='40'\n        isRequired={true}\n      />\n      <FormHelperText textAlign='right'>\n        max characters : 40\n      </FormHelperText>\n      \n    </FormControl>\n  );\n}\n","const url = \"https://api.imgflip.com/caption_image\";\nconst username = \"phill1976\";\nconst password = \"Xi0ZYp4hBDx4906EdZdc\";\n\nexport default async function postMemes(\n  data,\n  text,\n  setOutput,\n  setLoading,\n  setError\n) {\n  const textArr = Object.values(text);\n\n  const combineText = textArr\n    .map((e, idx) => `boxes[${idx}][text]=${e}`)\n    .join(\"&\");\n\n  try {\n    const req = await fetch(\n      `${url}?template_id=${data.id}&username=${username}&password=${password}&${combineText}`\n    );\n\n    const res = await req.json();\n\n    setOutput(res.data.url);\n\n    setLoading(false);\n  } catch (error) {\n    setLoading(false);\n    setError(error.message);\n    console.log(\"something went wrong\");\n  }\n}\n","import { Box, Button, Heading, Link, Spinner } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport ModalInput from \"./ModalInput\";\nimport { Link as ReachLink } from \"react-router-dom\";\nimport postMemes from \"../../utils/postMemes\";\nimport { useContext } from \"react\";\nimport { MemeContext } from \"../../context/memeContext\";\n\nexport default function ModalForm({ selectedMeme, setPostedMeme, setSaved }) {\n  const {setError} = useContext(MemeContext);\n  const { register, handleSubmit, errors } = useForm();\n  const boxesArr = new Array(selectedMeme.box_count).fill(0);\n\n  const [loading, setLoading] = React.useState(false);\n\n  const handleClose = () => setSaved(null)\n\n  const onSubmit = (values, e) => {\n    const valuesKeys = Object.keys(values);\n    setLoading(true);\n    if (valuesKeys.length === selectedMeme.box_count) {\n      // setLoading(true)\n      e.target.reset();\n      postMemes(selectedMeme, values, setPostedMeme, setLoading, setError);\n    } else {\n      e.target.reset();\n      setLoading(false);\n      setError('Invalid input!');\n    }\n  };\n\n  return (\n    <Box\n      padding=\"2rem 1rem\"\n      flexBasis=\"0\"\n      flexGrow=\"1\"\n      flexShrink=\"1\"\n      backgroundColor=\"#1E4E8C\"\n      boxShadow=\"5px 5px #1A202C\"\n      textAlign=\"center\"\n      as=\"form\"\n      marginX=\"1rem\"\n      position=\"relative\"\n      onSubmit={handleSubmit(onSubmit)}\n    >\n      {loading ? (\n        <Spinner className=\"spinner\" />\n      ) : (\n        <>\n          {\" \"}\n          <Heading marginBottom=\"1rem\"> Caption Meme </Heading>\n          {boxesArr.map((_, idx) => (\n            <ModalInput\n              errors={errors}\n              register={register}\n              key={idx}\n              idx={idx}\n            />\n          ))}\n          <Button\n            bg=\"blue.500\"\n            _hover={{ bg: \"blue.600\" }}\n            display=\"inline-block\"\n            marginTop=\"20px\"\n            type=\"submit\"\n            float=\"left\"\n          >\n            Submit\n          </Button>{\" \"}\n        </>\n      )}\n\n      <Link as={ReachLink} to=\"/\">\n        {\" \"}\n        <Button onClick={handleClose}\n          color=\"#fff\"\n          bg=\"transparent\"\n          _hover={{ bg: \"blue.600\" }}\n          display=\"block\"\n          position=\"absolute\"\n          bottom=\"10px\"\n          right=\"15px\"\n        >\n          go back\n        </Button>{\" \"}\n      </Link>\n    </Box>\n  );\n}\n","import React from \"react\";\nimport { Flex, Box, Button, Link } from \"@chakra-ui/core\";\nimport ModalImage from \"./ModalImage\";\nimport ModalForm from \"./ModalForm\";\nimport { useContext } from \"react\";\nimport { MemeContext } from \"../../context/memeContext\";\nimport { Link as ReachLink } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\n\nexport default function MemeTemplate() {\n  const { memes, savedMemes, setSavedMemes } = useContext(MemeContext);\n  let { id } = useParams();\n\n  const selectedMeme = savedMemes.filter((m) => m._id === id)[0]\n    ? savedMemes.filter((m) => m._id === id)[0]\n    : memes.filter((m) => m.id === id)[0];\n\n  const [postedMeme, setPostedMeme] = React.useState(null);\n\n  const [saved, setSaved] = React.useState(null);\n\n  const handleSaveMeme = () => {\n    // got from :\n    // https://gist.github.com/gordonbrander/2230317\n    const _id = \"_\" + Math.random().toString(36).substr(2, 9);\n    const name = selectedMeme.name;\n    const url = postedMeme;\n\n    setSaved(true);\n\n    const newSavedMeme = {\n      _id,\n      name,\n      url,\n      isSavedMeme: true,\n    };\n\n    setSavedMemes((s) => [...s, newSavedMeme]);\n  };\n\n  return (\n    <Box marginTop=\"6rem\" className=\"container\">\n      <Flex color=\"#fff\" flexDirection={{ base: \"column\", md: \"row\" }}>\n      <Link as={ReachLink} to=\"/user\">\n        {\" \"}\n        <Button\n          color=\"#fff\"\n          bg=\"transparent\"\n          _hover={{ bg: \"blue.600\" }}\n          display=\"block\"\n          position=\"absolute\"\n          bottom=\"10px\"\n          right=\"15px\"\n        >\n          go back\n        </Button>{\" \"}\n      </Link>\n        {selectedMeme && (\n          <ModalImage\n            selectedMeme={selectedMeme}\n            postedMeme={postedMeme}\n            handleSaveMeme={handleSaveMeme}\n            saved={saved}\n          />\n        )}\n\n        {selectedMeme && !selectedMeme.isSavedMeme && (\n          <ModalForm\n            selectedMeme={selectedMeme}\n            setPostedMeme={setPostedMeme}\n            setSaved={setSaved}\n          />\n        )}\n      </Flex>\n    </Box>\n  );\n}\n","import { Spinner } from \"@chakra-ui/core\";\nimport React, { useContext, useMemo } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport MainContainer from \"../../container/MainContainer\";\nimport { MemeContext } from \"../../context/memeContext\";\nimport spliceMemes from \"../../utils/spliceMemes\";\nimport useResponsiveColumn from \"../../utils/useResponsiveColumn\";\nimport ColumnContainer from \"./ColumnContainer\";\nimport MemeTemplate from \"./MemeTemplate\";\nimport useLoading from \"../../utils/useLoading\";\n\nexport default function Main() {\n  // get all memes from context provider\n  const { search, memes } = useContext(MemeContext);\n\n  const loading = useLoading(memes);\n\n  // filter memes base on search input\n  const filteredMemes = memes.filter((meme) =>\n    meme.name.toLowerCase().includes(search.toLowerCase())\n  );\n\n  // compute chunk lenght for column\n  const chunksLength = useResponsiveColumn();\n\n  // slice memes into chunks base on display size\n  const chunkMemes = useMemo(() => spliceMemes(filteredMemes, chunksLength), [\n    chunksLength,\n    filteredMemes,\n  ]);\n\n  if (loading) return <Spinner />;\n\n  return (\n    <MainContainer>\n      {loading ? (\n        <Spinner />\n      ) : (\n        <>\n          <Route\n            exact\n            path=\"/\"\n            render={(props) => (\n             chunkMemes ? <ColumnContainer {...props} chunkMemes={chunkMemes} /> : null\n            )}\n          />\n          <Route exact path=\"/meme/:id\" render={() => <MemeTemplate />} />\n        </>\n      )}\n    </MainContainer>\n  );\n}\n","import { useEffect, useState } from 'react'\n\nexport default function useLoading(input) {\n  const [loading, setLoading] = useState(true)\n\n  useEffect(()=> {\n    if (input) {\n      setLoading(false)\n    }\n  }, [input])\n\n  return loading\n}\n","import { useState, useEffect } from \"react\";\n\nexport default function useResponsiveColumn() {\n  const [num, setNum] = useState(3);\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (window.innerWidth <= 450) {\n        setNum(1);\n      } else if (window.innerWidth <= 750 && window.innerWidth >= 451) {\n        setNum(2);\n      } else {\n        setNum(3);\n      }\n    };\n\n    window.addEventListener('load', handleResize)\n    window.addEventListener('resize', handleResize)\n    return () => {\n      window.removeEventListener(\"load\", handleResize);\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  });\n\n  return num;\n}\n","import React from \"react\";\nimport { Box, Avatar, Text, Image } from \"@chakra-ui/core\";\nimport stackLogo from \"../../assets/jsreactnode.svg\";\nimport photo from \"../../assets/download.png\";\n\nexport default function About() {\n  return (\n    <>\n      <Box\n        color=\"white\"\n        backgroundColor=\"blue.800\"\n        padding=\"2rem\"\n        as=\"main\"\n        maxW=\"425px\"\n        mx=\"auto\"\n        marginTop=\"80px\"\n        boxShadow=\"0px 4px 4px rgba(0, 0, 0, 0.25)\"\n      >\n        <Avatar\n          width=\"255px\"\n          height=\"255px\"\n          display=\"block\"\n          marginX=\"auto\"\n          name=\"Dan Abrahmov\"\n          src={photo}\n          marginBottom=\"2rem\"\n          boxShadow=\"0px 4px 4px rgba(0, 0, 0, 0.25)\"\n        />\n        <Text opacity='.8' as=\"em\" fontSize=\"1.2rem\">\n          “Good webapp takes time, just like Wine”\n        </Text>\n        <Text opacity='.8' as=\"p\" fontSize=\".8rem\" marginBottom=\"2rem\">\n          - Definitely not my quotes\n        </Text>\n\n        <Text opacity='.8' lineHeight=\" 202.7%\">\n          This is a website where you can caption 100 top memes from imgflip.com\n          where all good memes come from. I created this website just for my\n          personal project which become a great learning path for me. I want to\n          give a shoutout and big thanks for all people whose code that I used\n          to make this project possible. the web layout is inspired by\n          pexels.com.\n        </Text>\n\n        <Text opacity='.8' marginTop=\"1rem\">Deddy Wolley</Text>\n      </Box>\n      <Image mx=\"auto\" marginTop=\"1.5rem\" src={stackLogo} />\n    </>\n  );\n}\n","import { CSSReset, ThemeProvider } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Dashboard from \"../components/dashboard/Dashboard\";\nimport Error from \"../components/Error\";\nimport Header from \"../components/header/Header\";\nimport Nav from \"../components/header/Nav\";\nimport Main from \"../components/main/Main\";\nimport MemeTemplate from \"../components/main/MemeTemplate\";\nimport { MemeProvider } from \"../context/memeContext\";\nimport \"./App.css\";\nimport About from \"../components/About/About\";\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <CSSReset />\n\n      <MemeProvider>\n        <Router>\n          <Nav />\n          <Switch>\n            <Route\n              path=\"/\"\n              exact\n              render={() => (\n                <>\n                  <Header />\n                  <Main />{\" \"}\n                </>\n              )}\n            />\n            <Route exact path=\"/meme/:id\" render={() => <MemeTemplate />} />\n            <Route exact path=\"/user\" render={() => <Dashboard />} />\n            <Route exact path=\"/about\" render={() => <About />} />\n          </Switch>\n        </Router>\n\n        <Error />\n      </MemeProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}